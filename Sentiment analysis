{"cells":[{"cell_type":"markdown","source":["Here's a complete Jupyter Notebook project for sentiment analysis. You can copy and paste the content of each cell directly into your notebook.\n","\n","-----\n","\n","### **Cell 1: Markdown**\n","\n","# Sentiment Analysis of Movie Reviews üé¨\n","\n","This project aims to build and train a neural network to classify movie reviews as either positive or negative. We'll use the popular IMDb dataset, which is conveniently available in Keras.\n","\n","**Project Steps:**\n","\n","1.  **Setup**: Import necessary libraries.\n","2.  **Load Data**: Load the IMDb movie review dataset.\n","3.  **Data Preprocessing**: Pad the sequences to ensure uniform length.\n","4.  **Build Model**: Create a neural network with an Embedding layer and an LSTM.\n","5.  **Train Model**: Train the model on our data.\n","6.  **Evaluate**: Check the model's performance on unseen test data.\n","7.  **Predict**: Use the trained model to predict the sentiment of a new, custom review.\n","\n","-----\n","\n","### **Cell 2: Code**"],"metadata":{"id":"ekNAKTb7n_Ks"}},{"cell_type":"code","source":["# 1. Setup: Import Libraries\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras.datasets import imdb\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n","import matplotlib.pyplot as plt\n","\n","print(\"TensorFlow Version:\", tf.__version__)"],"outputs":[{"output_type":"stream","name":"stdout","text":["TensorFlow Version: 2.18.0\n"]}],"execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m3j1rlQUn_Kv","executionInfo":{"status":"ok","timestamp":1752575273885,"user_tz":-330,"elapsed":8166,"user":{"displayName":"Dishari me","userId":"10459942516025559912"}},"outputId":"b2450544-567f-41cc-86ac-ed277c9e2ce3"}},{"cell_type":"markdown","source":["-----\n","\n","### **Cell 3: Markdown**\n","\n","## 2\\. Load and Explore the Data üìä\n","\n","We'll load the IMDb dataset from `keras.datasets`. The dataset is already preprocessed: words are encoded as integers, where each integer represents a specific word in a dictionary. We'll limit the vocabulary to the top 10,000 most frequent words.\n","\n","-----\n","\n","### **Cell 4: Code**"],"metadata":{"id":"nxgynOSQn_Kw"}},{"cell_type":"code","source":["# Load the dataset, keeping the top 10,000 most frequent words\n","vocab_size = 10000\n","(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=vocab_size)\n","\n","print(f\"Number of training samples: {len(train_data)}\")\n","print(f\"Number of testing samples: {len(test_data)}\")\n","print(\"\\nSample review (integer-encoded):\\n\", train_data[0][:15], \"...\")\n","print(\"\\nSample label:\", train_labels[0], \"(0 for Negative, 1 for Positive)\")"],"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","\u001b[1m17464789/17464789\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","Number of training samples: 25000\n","Number of testing samples: 25000\n","\n","Sample review (integer-encoded):\n"," [1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65, 458, 4468, 66, 3941, 4] ...\n","\n","Sample label: 1 (0 for Negative, 1 for Positive)\n"]}],"execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dTcspFSzn_Kx","executionInfo":{"status":"ok","timestamp":1752575278220,"user_tz":-330,"elapsed":4359,"user":{"displayName":"Dishari me","userId":"10459942516025559912"}},"outputId":"550722fc-0a65-4df6-b880-4c1775bc0c6d"}},{"cell_type":"markdown","source":["-----\n","\n","### **Cell 5: Markdown**\n","\n","Let's see what a review actually looks like. We need to fetch the word-to-index mapping and decode the integer sequence back into text.\n","\n","-----\n","\n","### **Cell 6: Code**"],"metadata":{"id":"tNbxcNHOn_Kx"}},{"cell_type":"code","source":["# Get the word index from the dataset\n","word_index = imdb.get_word_index()\n","\n","# The first indices are reserved: 0 (padding), 1 (start of sequence), 2 (unknown)\n","# We need to shift the original word index by 3\n","word_index = {k:(v+3) for k,v in word_index.items()}\n","word_index[\"<PAD>\"] = 0\n","word_index[\"<START>\"] = 1\n","word_index[\"<UNK>\"] = 2  # Unknown\n","\n","# Create a reverse word index to map integers back to words\n","reverse_word_index = {value: key for key, value in word_index.items()}\n","\n","# Function to decode a review\n","def decode_review(text):\n","    return ' '.join([reverse_word_index.get(i, '?') for i in text])\n","\n","# See the decoded version of the first review\n","print(decode_review(train_data[0]))"],"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb_word_index.json\n","\u001b[1m1641221/1641221\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","<START> this film was just brilliant casting location scenery story direction everyone's really suited the part they played and you could just imagine being there robert <UNK> is an amazing actor and now the same being director <UNK> father came from the same scottish island as myself so i loved the fact there was a real connection with this film the witty remarks throughout the film were great it was just brilliant so much that i bought the film as soon as it was released for <UNK> and would recommend it to everyone to watch and the fly fishing was amazing really cried at the end it was so sad and you know what they say if you cry at a film it must have been good and this definitely was also <UNK> to the two little boy's that played the <UNK> of norman and paul they were just brilliant children are often left out of the <UNK> list i think because the stars that play them all grown up are such a big profile for the whole film but these children are amazing and should be praised for what they have done don't you think the whole story was so lovely because it was true and was someone's life after all that was shared with us all\n"]}],"execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bK7bNohDn_Kx","executionInfo":{"status":"ok","timestamp":1752575278515,"user_tz":-330,"elapsed":296,"user":{"displayName":"Dishari me","userId":"10459942516025559912"}},"outputId":"30560470-f60f-405d-830d-754ce1e01177"}},{"cell_type":"markdown","source":["-----\n","\n","### **Cell 7: Markdown**\n","\n","## 3\\. Data Preprocessing ‚öôÔ∏è\n","\n","Neural networks require inputs of a consistent shape. Since our reviews have varying lengths, we'll pad them with a special `<PAD>` token so that every review sequence has the same length. We'll cap the review length at 256 words.\n","\n","-----\n","\n","### **Cell 8: Code**"],"metadata":{"id":"E8RF_nl1n_Kx"}},{"cell_type":"code","source":["# Set the maximum length of reviews\n","maxlen = 256\n","\n","# Pad the sequences\n","train_data = pad_sequences(train_data, value=word_index[\"<PAD>\"], padding='post', maxlen=maxlen)\n","test_data = pad_sequences(test_data, value=word_index[\"<PAD>\"], padding='post', maxlen=maxlen)\n","\n","print(\"Shape of training data after padding:\", train_data.shape)\n","print(\"Shape of testing data after padding:\", test_data.shape)\n","print(\"\\nPadded review example:\\n\", train_data[0])"],"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of training data after padding: (25000, 256)\n","Shape of testing data after padding: (25000, 256)\n","\n","Padded review example:\n"," [   1   14   22   16   43  530  973 1622 1385   65  458 4468   66 3941\n","    4  173   36  256    5   25  100   43  838  112   50  670    2    9\n","   35  480  284    5  150    4  172  112  167    2  336  385   39    4\n","  172 4536 1111   17  546   38   13  447    4  192   50   16    6  147\n"," 2025   19   14   22    4 1920 4613  469    4   22   71   87   12   16\n","   43  530   38   76   15   13 1247    4   22   17  515   17   12   16\n","  626   18    2    5   62  386   12    8  316    8  106    5    4 2223\n"," 5244   16  480   66 3785   33    4  130   12   16   38  619    5   25\n","  124   51   36  135   48   25 1415   33    6   22   12  215   28   77\n","   52    5   14  407   16   82    2    8    4  107  117 5952   15  256\n","    4    2    7 3766    5  723   36   71   43  530  476   26  400  317\n","   46    7    4    2 1029   13  104   88    4  381   15  297   98   32\n"," 2071   56   26  141    6  194 7486   18    4  226   22   21  134  476\n","   26  480    5  144   30 5535   18   51   36   28  224   92   25  104\n","    4  226   65   16   38 1334   88   12   16  283    5   16 4472  113\n","  103   32   15   16 5345   19  178   32    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0]\n"]}],"execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"36L4Wfl3n_Ky","executionInfo":{"status":"ok","timestamp":1752575279071,"user_tz":-330,"elapsed":552,"user":{"displayName":"Dishari me","userId":"10459942516025559912"}},"outputId":"f56e6102-9485-4046-8b45-607363503516"}},{"cell_type":"markdown","source":["-----\n","\n","### **Cell 9: Markdown**\n","\n","## 4\\. Build the Model üß†\n","\n","We'll build our model using the Keras Sequential API.\n","\n","1.  **Embedding Layer**: This layer takes the integer-encoded vocabulary and looks up the embedding vector for each word index. These vectors are learned as the model trains.\n","2.  **LSTM Layer**: A Long Short-Term Memory layer is a type of Recurrent Neural Network (RNN) well-suited for processing sequential data like text.\n","3.  **Dense Layer**: A standard fully-connected layer for classification.\n","4.  **Output Layer**: A final Dense layer with a **sigmoid** activation function, which outputs a probability score between 0 and 1, indicating the sentiment.\n","\n","-----\n","\n","### **Cell 10: Code**"],"metadata":{"id":"m_4DaHGqn_Ky"}},{"cell_type":"code","source":["embedding_dim = 16\n","\n","model = Sequential([\n","    # 1. Embedding Layer\n","    Embedding(vocab_size, embedding_dim, input_length=maxlen),\n","\n","    # 2. LSTM Layer\n","    LSTM(64),\n","\n","    # 3. Dense Layer\n","    Dense(64, activation='relu'),\n","    Dropout(0.5), # Dropout for regularization\n","\n","    # 4. Output Layer\n","    Dense(1, activation='sigmoid')\n","])\n","\n","# Compile the model\n","model.compile(optimizer='adam',\n","              loss='binary_crossentropy',\n","              metrics=['accuracy'])\n","\n","model.summary()"],"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"sequential\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n","‚îÉ\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m‚îÉ\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m‚îÉ\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m‚îÉ\n","‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©\n","‚îÇ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           ‚îÇ ?                      ‚îÇ   \u001b[38;5;34m0\u001b[0m (unbuilt) ‚îÇ\n","‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n","‚îÇ lstm (\u001b[38;5;33mLSTM\u001b[0m)                     ‚îÇ ?                      ‚îÇ   \u001b[38;5;34m0\u001b[0m (unbuilt) ‚îÇ\n","‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n","‚îÇ dense (\u001b[38;5;33mDense\u001b[0m)                   ‚îÇ ?                      ‚îÇ   \u001b[38;5;34m0\u001b[0m (unbuilt) ‚îÇ\n","‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n","‚îÇ dropout (\u001b[38;5;33mDropout\u001b[0m)               ‚îÇ ?                      ‚îÇ             \u001b[38;5;34m0\u001b[0m ‚îÇ\n","‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n","‚îÇ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 ‚îÇ ?                      ‚îÇ   \u001b[38;5;34m0\u001b[0m (unbuilt) ‚îÇ\n","‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n","‚îÉ<span style=\"font-weight: bold\"> Layer (type)                    </span>‚îÉ<span style=\"font-weight: bold\"> Output Shape           </span>‚îÉ<span style=\"font-weight: bold\">       Param # </span>‚îÉ\n","‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©\n","‚îÇ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           ‚îÇ ?                      ‚îÇ   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) ‚îÇ\n","‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n","‚îÇ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                     ‚îÇ ?                      ‚îÇ   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) ‚îÇ\n","‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n","‚îÇ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   ‚îÇ ?                      ‚îÇ   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) ‚îÇ\n","‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n","‚îÇ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               ‚îÇ ?                      ‚îÇ             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> ‚îÇ\n","‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n","‚îÇ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 ‚îÇ ?                      ‚îÇ   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) ‚îÇ\n","‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}}],"execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":324},"id":"yh1kKuJnn_Ky","executionInfo":{"status":"ok","timestamp":1752575279234,"user_tz":-330,"elapsed":165,"user":{"displayName":"Dishari me","userId":"10459942516025559912"}},"outputId":"ac16b130-0d96-4320-a290-5ed53baa210a"}},{"cell_type":"markdown","source":["-----\n","\n","### **Cell 11: Markdown**\n","\n","## 5\\. Train the Model üöÇ\n","\n","Now it's time to train our model. We'll use the `.fit()` method, passing it the training data, labels, number of epochs, and a validation split to monitor performance on data it hasn't seen during training.\n","\n","-----\n","\n","### **Cell 12: Code**"],"metadata":{"id":"bbE9YggMn_Kz"}},{"cell_type":"code","source":["epochs = 10\n","batch_size = 512\n","\n","history = model.fit(train_data,\n","                    train_labels,\n","                    epochs=epochs,\n","                    batch_size=batch_size,\n","                    validation_split=0.2) # Use 20% of training data for validation"],"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m40/40\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 876ms/step - accuracy: 0.5122 - loss: 0.6931 - val_accuracy: 0.5198 - val_loss: 0.6924\n","Epoch 2/10\n","\u001b[1m40/40\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 880ms/step - accuracy: 0.5318 - loss: 0.6920 - val_accuracy: 0.4700 - val_loss: 0.6940\n","Epoch 3/10\n","\u001b[1m40/40\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 861ms/step - accuracy: 0.4977 - loss: 0.6947 - val_accuracy: 0.5188 - val_loss: 0.6928\n","Epoch 4/10\n","\u001b[1m40/40\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 826ms/step - accuracy: 0.5147 - loss: 0.6928 - val_accuracy: 0.5090 - val_loss: 0.6926\n","Epoch 5/10\n","\u001b[1m40/40\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 843ms/step - accuracy: 0.5211 - loss: 0.6924 - val_accuracy: 0.5088 - val_loss: 0.6921\n","Epoch 6/10\n","\u001b[1m40/40\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 855ms/step - accuracy: 0.5074 - loss: 0.6917 - val_accuracy: 0.5278 - val_loss: 0.6912\n","Epoch 7/10\n","\u001b[1m40/40\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 853ms/step - accuracy: 0.5404 - loss: 0.6896 - val_accuracy: 0.5326 - val_loss: 0.6883\n","Epoch 8/10\n","\u001b[1m40/40\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 818ms/step - accuracy: 0.5585 - loss: 0.6834 - val_accuracy: 0.5486 - val_loss: 0.6747\n","Epoch 9/10\n","\u001b[1m40/40\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 864ms/step - accuracy: 0.5903 - loss: 0.6550 - val_accuracy: 0.5722 - val_loss: 0.6513\n","Epoch 10/10\n","\u001b[1m40/40\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 867ms/step - accuracy: 0.6071 - loss: 0.6143 - val_accuracy: 0.5988 - val_loss: 0.6255\n"]}],"execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OsICoP37n_Kz","executionInfo":{"status":"ok","timestamp":1752575674465,"user_tz":-330,"elapsed":395228,"user":{"displayName":"Dishari me","userId":"10459942516025559912"}},"outputId":"c4305311-7f62-40b5-ec37-3de4a0f54430"}},{"cell_type":"markdown","source":["-----\n","\n","### **Cell 13: Markdown**\n","\n","## 6\\. Evaluate and Visualize Performance üìà\n","\n","Let's see how our model performs. We'll first evaluate its accuracy on the unseen test set. Then, we'll plot the training and validation accuracy/loss to see how our model learned over time and to check for overfitting.\n","\n","-----\n","\n","### **Cell 14: Code**"],"metadata":{"id":"A92uP0f4n_Kz"}},{"cell_type":"code","source":["# Evaluate the model on the test set\n","loss, accuracy = model.evaluate(test_data, test_labels)\n","print(f\"\\nTest Accuracy: {accuracy*100:.2f}%\")\n","print(f\"Test Loss: {loss:.4f}\")\n","\n","# Plotting function\n","def plot_history(history):\n","    acc = history.history['accuracy']\n","    val_acc = history.history['val_accuracy']\n","    loss = history.history['loss']\n","    val_loss = history.history['val_loss']\n","    epochs_range = range(len(acc))\n","\n","    plt.figure(figsize=(12, 5))\n","    plt.subplot(1, 2, 1)\n","    plt.plot(epochs_range, acc, label='Training Accuracy')\n","    plt.plot(epochs_range, val_acc, label='Validation Accuracy')\n","    plt.legend(loc='lower right')\n","    plt.title('Training and Validation Accuracy')\n","\n","    plt.subplot(1, 2, 2)\n","    plt.plot(epochs_range, loss, label='Training Loss')\n","    plt.plot(epochs_range, val_loss, label='Validation Loss')\n","    plt.legend(loc='upper right')\n","    plt.title('Training and Validation Loss')\n","    plt.show()\n","\n","# Plot the results\n","plot_history(history)"],"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m782/782\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 35ms/step - accuracy: 0.5917 - loss: 0.6278\n","\n","Test Accuracy: 58.79%\n","Test Loss: 0.6278\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"id":"BVocHjFon_Kz","executionInfo":{"status":"ok","timestamp":1752575716264,"user_tz":-330,"elapsed":41782,"user":{"displayName":"Dishari me","userId":"10459942516025559912"}},"outputId":"104e62b1-e1f6-46a7-a18a-8fdaee73d00e"}},{"cell_type":"markdown","source":["**Interpretation**: If the validation accuracy is high and the gap between training and validation loss is small, our model is generalizing well\\!\n","\n","-----\n","\n","### **Cell 15: Markdown**\n","\n","## 7\\. Predict on New, Custom Reviews ü§î\n","\n","Finally, let's use our trained model to predict the sentiment of a new review we write ourselves. We must remember to preprocess this new text in the exact same way as our training data.\n","\n","-----\n","\n","### **Cell 16: Code**"],"metadata":{"id":"i8ldVWzin_Kz"}},{"cell_type":"code","source":["def predict_sentiment(review_text):\n","    # Encode the review using the word_index\n","    encoded_review = [word_index.get(word, word_index[\"<UNK>\"]) for word in review_text.lower().split()]\n","\n","    # Pad the encoded review\n","    padded_review = pad_sequences([encoded_review], maxlen=maxlen, padding='post', value=word_index[\"<PAD>\"])\n","\n","    # Make a prediction\n","    prediction = model.predict(padded_review)\n","\n","    # Interpret the prediction\n","    sentiment = \"Positive\" if prediction[0][0] > 0.5 else \"Negative\"\n","\n","    print(f\"Review: '{review_text}'\")\n","    print(f\"Prediction Score: {prediction[0][0]:.4f}\")\n","    print(f\"Sentiment: {sentiment}\")\n","\n","# Test with a positive review\n","predict_sentiment(\"This movie was absolutely fantastic! The acting was brilliant and the plot was thrilling.\")\n","\n","print(\"-\" * 30)\n","\n","# Test with a negative review\n","predict_sentiment(\"It was a complete waste of time. The movie was boring and predictable.\")"],"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 208ms/step\n","Review: 'This movie was absolutely fantastic! The acting was brilliant and the plot was thrilling.'\n","Prediction Score: 0.4995\n","Sentiment: Negative\n","------------------------------\n","\u001b[1m1/1\u001b[0m \u001b[32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step\n","Review: 'It was a complete waste of time. The movie was boring and predictable.'\n","Prediction Score: 0.4995\n","Sentiment: Negative\n"]}],"execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"250ahC3nn_Kz","executionInfo":{"status":"ok","timestamp":1752575716426,"user_tz":-330,"elapsed":18,"user":{"displayName":"Dishari me","userId":"10459942516025559912"}},"outputId":"e97121ef-a168-4413-fc66-c4f8a4e37f03"}}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}